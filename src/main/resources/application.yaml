spring:
  application:
    name: cockroachdb
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # This is the main bit signalling transactionality
      transaction-id-prefix: kafka-tx-
      properties:
        schema.registry.url: http://localhost:8081
      # to ensure that the producer waits for all replicas to acknowledge the write before considering it successful
      acks: all
      retries: 3

    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: ${spring.application.name}-group
      auto-offset-reset: earliest
      properties:
        isolation.level: read_committed
        schema.registry.url: http://localhost:8081

  logging:
    level:
      root: info
      me.mikael: debug
      org.springframework.transaction: trace
      org.springframework.kafka.transaction: debug

app:
  kafka:
    customer-topic-name: me-mikael-cockroachdb-customer
    activity-topic-name: me-mikael-cockroachdb-activity